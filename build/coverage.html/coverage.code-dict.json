{"/home/travis/build/npmtest/node-npmtest-gulp-jshint/test.js":"/* istanbul instrument in package npmtest_gulp_jshint */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-jshint/lib.npmtest_gulp_jshint.js":"/* istanbul instrument in package npmtest_gulp_jshint */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_gulp_jshint = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_gulp_jshint = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-jshint/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-gulp-jshint && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_gulp_jshint */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_gulp_jshint\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_gulp_jshint.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_gulp_jshint.rollup.js'] =\n            local.assetsDict['/assets.npmtest_gulp_jshint.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_gulp_jshint.__dirname + '/lib.npmtest_gulp_jshint.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-jshint/node_modules/gulp-jshint/src/index.js":"var reporters = require('./reporters');\nvar extract = require('./extract');\nvar fileIgnored = require('./fileIgnored');\nvar makeLint = require('./lint');\nvar stream = require('./stream');\n\nvar jshintPlugin = function (opt) {\n  var lint = makeLint(opt);\n\n  return stream(function (file, cb) {\n    fileIgnored(file, function (err, ignored) {\n      if (err) return cb(err);\n      if (ignored) return cb(null, file);\n\n      lint(file, function (err) {\n        if (err) return cb(err);\n        cb(null, file);\n      });\n    });\n  });\n};\n\n// expose the reporters\njshintPlugin.failReporter = reporters.fail;\njshintPlugin.loadReporter = reporters.loadReporter;\njshintPlugin.reporter = reporters.reporter;\n\n// export the extractor\njshintPlugin.extract = extract;\n\nmodule.exports = jshintPlugin;\n","/home/travis/build/npmtest/node-npmtest-gulp-jshint/node_modules/gulp-jshint/src/reporters/index.js":"var PluginError = require('gulp-util').PluginError;\nvar stream = require('../stream');\nvar defaults = require('lodash/defaults');\n\nexports.failReporter = require('./fail');\n\nexports.loadReporter = function (reporter) {\n  // we want the function\n  if (typeof reporter === 'function') return reporter;\n\n  // object reporters\n  if (typeof reporter === 'object' && typeof reporter.reporter === 'function') return reporter.reporter;\n\n  // load jshint built-in reporters\n  if (typeof reporter === 'string') {\n    try {\n      return exports.loadReporter(require('jshint/src/reporters/' + reporter));\n    } catch (err) {}\n  }\n\n  // load full-path or module reporters\n  if (typeof reporter === 'string') {\n    try {\n      return exports.loadReporter(require(reporter));\n    } catch (err) {}\n  }\n};\n\nexports.reporter = function (reporter, reporterCfg) {\n  reporterCfg = reporterCfg || {};\n\n  if (reporter === 'fail') {\n    return exports.failReporter(reporterCfg);\n  }\n\n  var rpt = exports.loadReporter(reporter || 'default');\n\n  if (typeof rpt !== 'function') {\n    throw new PluginError('gulp-jshint', 'Invalid reporter');\n  }\n\n  // return stream that reports stuff\n  return stream(function (file, cb) {\n    if (file.jshint && !file.jshint.success && !file.jshint.ignored) {\n      // merge the reporter config into this files config\n      var opt = defaults({}, reporterCfg, file.jshint.opt);\n\n      rpt(file.jshint.results, file.jshint.data, opt);\n    }\n\n    cb(null, file);\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-gulp-jshint/node_modules/gulp-jshint/src/stream.js":"var through2 = require('through2');\n\nmodule.exports = function (config, handler, flush) {\n  if (typeof config === 'function') {\n    flush = handler;\n    handler = config;\n    config = {};\n  }\n\n  // default to a pass through stream\n  if (typeof handler !== 'function') handler = function (a) { this.push(a); };\n\n  // if a handler leaves off the done callback, we will call it for them\n  var async = handler.length >= 2;\n\n  var str = through2({ objectMode: true }, function (obj, enc, _cb) {\n    var done = function (err, obj) {\n      if (err) str.emit('error', err);\n      if (obj) str.push(obj);\n\n      _cb();\n    };\n\n\n    if (async) {\n      handler.call(str, obj, done);\n    } else {\n      handler.call(str, obj);\n      done();\n    }\n  }, function (done) {\n    if (flush) {\n      flush.call(this, done);\n    }\n\n    if (!flush || flush.length === 0) done();\n  });\n\n  return str;\n};","/home/travis/build/npmtest/node-npmtest-gulp-jshint/node_modules/gulp-jshint/src/reporters/fail.js":"var path = require('path');\nvar stream = require('../stream');\nvar PluginError = require('gulp-util').PluginError;\nvar reduce = require('lodash/reduce');\n\nmodule.exports = function (opts) {\n  opts = opts || {};\n\n  // @type false|[]paths - paths to files that failed jshint\n  var fails = false;\n\n  // @type false|[]files - files that need to be passed downstream on flush\n  var buffer = opts.buffer !== false ? [] : false;\n\n  // @type object - count of jshint error, warning and info messages\n  var messages = {error: 0, warning: 0, info: 0};\n\n  return stream(\n    function through(file) {\n      // count error, warning and info messages\n      if (file.jshint && file.jshint.results) {\n        messages = reduce(file.jshint.results, function(result, err) {\n          return {\n            error: result.error + Number(err.error.code[0] === 'E'),\n            warning: result.warning + Number(err.error.code[0] === 'W'),\n            info: result.info + Number(err.error.code[0] === 'I')\n          };\n        }, messages);\n      }\n\n      // check for failure\n      if (file.jshint && !file.jshint.success && !file.jshint.ignored) {\n        (fails = fails || []).push(path.relative(process.cwd(), file.path));\n      }\n\n      // buffer or pass downstream\n      (buffer || this).push(file);\n    }, function flush() {\n      var failOnWarning = !opts.ignoreWarning && messages.warning;\n      var failOnInfo = !opts.ignoreInfo && messages.info;\n      if (fails && (messages.error || failOnWarning || failOnInfo)) {\n        this.emit('error', new PluginError('gulp-jshint', {\n          message: 'JSHint failed for: ' + fails.join(', '),\n          showStack: false\n        }));\n      }\n\n      if (buffer) {\n        // send the buffered files downstream\n        buffer.forEach(function (file) {\n          this.push(file);\n        }, this);\n      }\n    }\n  );\n};\n","/home/travis/build/npmtest/node-npmtest-gulp-jshint/node_modules/gulp-jshint/src/extract.js":"var jshintcli = require('jshint/src/cli');\nvar fileIgnored = require('./fileIgnored');\nvar stream = require('./stream');\n\nmodule.exports = function extract(when) {\n  when = when || 'auto';\n\n  return stream(function (file, cb) {\n    fileIgnored(file, function (err, ignored) {\n      if (err) return cb(err);\n      if (ignored) return cb(null, file);\n\n      file.jshint = file.jshint || {};\n      file.jshint.extracted = jshintcli.extract(file.contents.toString('utf8'), when);\n      return cb(null, file);\n    });\n  });\n};","/home/travis/build/npmtest/node-npmtest-gulp-jshint/node_modules/gulp-jshint/src/fileIgnored.js":"var fs = require('fs');\nvar memoize = require('lodash/memoize');\nvar Minimatch = require('minimatch').Minimatch;\nvar resolve = require('path').resolve;\nvar dirname = require('path').dirname;\nvar join = require('path').join;\nvar sep = require('path').sep;\nvar RcLoader = require('rcloader');\nvar PluginError = require('gulp-util').PluginError;\n\nvar ignoreLoader = new RcLoader('.jshintignore', {}, {\n  loader: function (path) {\n    // .jshintignore is a line-delimited list of patterns\n    // convert to an array and filter empty lines\n    var contents = fs.readFileSync(path, 'utf8');\n    var dir = dirname(path);\n    return {\n      file: path,\n      patterns:\n        contents.toString('utf8')\n        .split(/\\r?\\n/)\n        .filter(function (line) { return !!line.trim(); })\n        .map(function (line) {\n          return resolve(dir, line.trim());\n        })\n    };\n  }\n});\n\n// get the .jshintignore closest to the current working directory,\n// but since RcLoader expect to start searching at a file we need to\n// fake a file name\nvar ignore = ignoreLoader.for(join(process.cwd(), 'index.js'));\n\nmodule.exports = (function () {\n  if (!ignore.file || !ignore.patterns.length) {\n    return function (file, cb) {\n      cb(null, false);\n    };\n  }\n\n  var minimatch = memoize(function (pattern) {\n    return new Minimatch(pattern, { nocase: true });\n  });\n\n  return function check(file, cb) {\n    if (file.isNull()) return cb(null, true);\n    if (file.isStream()) return cb(new PluginError('gulp-jshint', 'Streaming not supported'));\n\n    var path = file.path;\n    cb(null, ignore.patterns.some(function (pattern) {\n      if (minimatch(pattern).match(path)) {\n        return true;\n      }\n\n      if (pattern === path) {\n        return true;\n      }\n\n      var prefix = pattern;\n      if (prefix.substr(-1) !== sep) {\n        pattern += sep;\n      }\n\n      if (path.indexOf(prefix) === 0) {\n        return true;\n      }\n    }));\n  };\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-jshint/node_modules/gulp-jshint/src/lint.js":"var path = require('path');\nvar PluginError = require('gulp-util').PluginError;\nvar RcLoader = require('rcloader');\nvar jshintcli = require('jshint/src/cli');\nvar minimatch = require('minimatch');\n\nvar assign = require('lodash/assign');\nvar forEach = require('lodash/forEach');\nvar isString = require('lodash/isString');\nvar isFunction = require('lodash/isFunction');\n\nmodule.exports = function createLintFunction(userOpts) {\n  userOpts = userOpts || {};\n\n  // Default jshint\n  // Need to assign within the createLintFunction code,\n  // else repeated requires (like in tests) will\n  // not update the variable\n  var jshint = require('jshint').JSHINT;\n\n  if (userOpts.linter) {\n    if (isString(userOpts.linter)) {\n      // require throws an error if the component can't be found,\n      // so we're guaranteed that `require(jshint)` will not be undefined\n      jshint = require(userOpts.linter).JSHINT;\n    } else { // should be a function\n      jshint = userOpts.linter;\n    }\n\n    if (!isFunction(jshint)) {\n      throw new PluginError('gulp-jshint',\n        'Invalid linter \"'+ userOpts.linter + '\". Must be a function or requirable package.'\n      );\n    }\n\n    delete userOpts.linter;\n  }\n\n  var rcLoader = new RcLoader('.jshintrc', userOpts, {\n    loader: function (path) {\n      var cfg = jshintcli.loadConfig(path);\n      delete cfg.dirname;\n      return cfg;\n    }\n  });\n\n  var reportErrors = function (file, out, cfg) {\n    var filePath = file.path ? path.relative(process.cwd(), file.path): 'stdin';\n\n    out.results = jshint.errors.map(function (err) {\n      if (!err) return;\n      return { file: filePath, error: err };\n    }).filter(Boolean);\n\n    out.opt = cfg;\n    out.data = [jshint.data()];\n    out.data[0].file = filePath;\n  };\n\n  return function lint(file, cb) {\n    // pass through dirs, streaming files, etc.\n    if (!file.isBuffer()) {\n      return cb(null, file);\n    }\n    rcLoader.for(file.path, function (err, cfg) {\n      if (err) return cb(err);\n\n      var globals = {};\n      if (cfg.globals) {\n        globals = cfg.globals;\n        delete cfg.globals;\n      }\n\n      if (cfg.overrides) {\n        forEach(cfg.overrides, function (options, pattern) {\n          if (!minimatch(file.path, pattern, { nocase: true, matchBase: true })) return;\n\n          if (options.globals) {\n            globals = assign(globals, options.globals);\n            delete options.globals;\n          }\n\n          assign(cfg, options);\n        });\n\n        delete cfg.overrides;\n      }\n\n      // get or create file.jshint, we will write all output here\n      var out = file.jshint || (file.jshint = {});\n      var str = isString(out.extracted) ? out.extracted : file.contents.toString('utf8');\n\n      out.success = jshint(str, cfg, globals);\n      if (!out.success) reportErrors(file, out, cfg);\n\n      return cb(null, file);\n    });\n  };\n};\n"}